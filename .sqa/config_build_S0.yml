config:
  deploy_template: '.sqa/docker-compose-build-S0.yml'
  project_repos:
    onedatasim:
      repo: 'https://github.com/EOSC-synergy/onedataSim'
      branch: 'dev'
  credentials:
    # not necessary with pre-uploaded docker-images with corsika
    #- id: onedata-token-build-ajrm
    #  variable: TOKEN_BUILD
    # TOKEN_RUN is needed for testing the application
    - id: onedata-token-test8-ajrm
      variable: TOKEN_RUN
    - id: onedata-token-publish-ajrm
      variable: TOKEN_PUBLISH
    # If we will want a private DockerHub
    - id: repoimage-lago-ajrm
      username_var: JPL_DOCKERUSER
      password_var: JPL_DOCKERPASS
environment:
  # first testing with eoscsynergybot account in dockerhub (synergy_dockerhub_bot_pass)
  #JPL_DOCKERSERVER: "hub.docker.com"
  JPL_DOCKERPUSH: onedatasim-s0
  JPL_DOCKERFORCEBUILD: "True"
# #  LANG: C.UTF-8
sqa_criteria:
  qc_functional:
    repos:
      onedatasim:
        # we need a complete build to test simulations
        container: onedatasim-s0
        #environment:
        #  - ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
        #  - ONECLIENT_PROVIDER_HOST="mon01-tic.ciemat.es"
        # estos comandos son "exec" contra un container ya levantado con docker-compose -f build...yml
        commands:
          - pwd
          - whoami
          - git --git-dir /opt/onedataSim/.git rev-parse --verify HEAD 
          # - bash -lc "export"
          # - bash -lc "do_sims_onedata.py -?"
          - ls -alh /mnt/datahub.egi.eu
  qc_coverage:
    repos:
      onedatasim:
        container: onedatasim-s0
        commands:
          - >
            env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
            env ONECLIENT_PROVIDER_HOST="ceta-ciemat-02.datahub.egi.eu"
            #pip install coverage && coverage run -m unittest discover -s /opt/onedataSim
            pip3 install coverage && python3 -m coverage run -m unittest discover -s /opt/onedataSim
          #- cover
  qc_security:
    repos:
      onedatasim:
         # we need testing security of unittests..., not only with plain code.    
        container: onedatasim-s0
        commands:
          - >
            env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
            env ONECLIENT_PROVIDER_HOST="ceta-ciemat-02.datahub.egi.eu"
            #bandit -r /opt/onedataSim -x tests -s B404,B602,B603
            pip3 install bandit && python3 -m bandit -r /opt/onedataSim -x tests -s B404,B602,B603
          #- bandit -r /onedatasim-repo -x tests

#  qc_fair: # it is not defined yet in JePL library, we have to use qc_doc
  qc_doc:
    repos:
      FAIR_UJI:
        container: fair_uji
        commands:
        - >
          env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
          env ONECLIENT_PROVIDER_HOST="ceta-ciemat-02.datahub.egi.eu"
          bash -lc 'curl -k --tlsv1.2 -H "X-CDMI-Specification-Version: 1.1.1" -H "X-Auth-Token: ${ONECLIENT_ACCESS_TOKEN}" 
          -X GET "https://${ONECLIENT_PROVIDER_HOST}/cdmi/test8/SQaaS/handles/lasthandles0.txt" 
          -o /tmp/lasthandles.txt'
        # ojo comandos en /bin/sh (default)  
        - > 
          HANDLE = $(cat lasthandles.json | sed "s/'/%%%/g" | sed 's/%%%/"/g' | awk -F', "metadata' '{print $1"}"}' | jq .publicHandle);
          'curl -H ''Accept: application/json'' -H ''Content-Type: application/json''
          -H ''Authorization: Basic bWFydmVsOndvbmRlcndvbWFu'' -X POST 
          -d ''{"metadata_service_endpoint":"http://datahub.egi.eu/oai_pmh",
          "metadata_service_type":"oai_pmh","object_identifier":${HANDLE},
          "test_debug":true,"use_datacite":false}''
          http://localhost:1071/fuji/api/v1/evaluate'
      FAIR_EVAL:
        container: fair_eva
        # Onedata has Verbs as petition of LAGO: http://datahub.egi.eu/oai_pmh?verb=ListSets
        # Then the whole OAI-PMH repository is
        # http://datahub.egi.eu/oai_pmh?verb=ListRecords&metadataPrefix=oai_dc&set=986fe2ab97a6b749fac17eb9e9b38c37chb045
        # however, to check the build we only check a the testing catalog generated in qc_functional
        # as an example we can use: 
        # http://datahub.egi.eu/oai_pmh?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:datahub.egi.eu:f11ab6c1168399bc6f062d043c3c97f6ch693a
        # which handle is http://hdl.handle.net/21.12145/V6CkywE
        ####
        # Guardo el handle y el share de qc_functional en un fichero conocido y publico, luego lo uso para los FAIR_eva y los F-UJI respectivamente
        ####
        commands:
        - >
          env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
          env ONECLIENT_PROVIDER_HOST="ceta-ciemat-02.datahub.egi.eu"
          curl -k --tlsv1.2 -H "X-CDMI-Specification-Version: 1.1.1" -H "X-Auth-Token: ${ONECLIENT_ACCESS_TOKEN}" 
          -X GET "https://${ONECLIENT_PROVIDER_HOST}/cdmi/test8/SQaaS/handles/lasthandles0.json" 
          -o /tmp/lasthandles.json
        - export SHAREID = $(cat lasthandles.json | sed "s/'/%%%/g" | sed 's/%%%/"/g' | awk -F', "metadata' '{print $1"}"}' | jq .resourceId)
        - 'curl -H ''Content-Type: application/json'' -X POST 
          -d ''{"id": ${SHAREID},
          "repo": "oai-pmh", "oai_base": "http://datahub.egi.eu/oai_pmh"}''
          http://localhost:9090/v1.0/rda/rda_all'
timeout: 900
